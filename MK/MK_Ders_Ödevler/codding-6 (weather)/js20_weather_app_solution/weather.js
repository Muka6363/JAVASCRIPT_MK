const form = document.querySelector("section.top-banner form");
const input = document.querySelector(".container input"); // container altÄ±ndakÄ± Ä±nput
const msg = document.querySelector("span.msg"); //msg clasÄ±na aÄ±t span
const list = document.querySelector(".ajax-section ul.cities"); // bunlar arasÄ±nda bosluk olmasaydÄ± Ä±kÄ± tane clasÄ±nÄ±n yazÄ±ldÄ±gÄ± bÄ±r elementten bahsetmÄ±s olacaktÄ±k. bosluk olmasÄ± sunu Ä±fade eder---> ajax-sectÄ±on clasÄ±na sahÄ±p bÄ±r parentÄ± olan yanÄ± bunun Ä±cÄ±nde -altÄ±nda bulunan ve cÄ±tÄ±es clasÄ±na sahÄ±p ul etÄ±ketÄ± demektÄ±r.

// localStorage.setItem("tokenKeyEncrypted", EncryptStringAES("4d8fb5b93d4af21d66a2948710284366"));
// todo: token Ä± sÄ±frelÄ± bÄ±r sekÄ±lde browserde tutmamÄ±z lazÄ±m. her seferÄ±nde degÄ±skene atayÄ±p ulu orta yerde tutmak dogru degÄ±l. react da gorecegÄ±z baska dosyalarda tutulur bunlar.
localStorage.setItem(
  "tokenKey",
  "RAPAIooyOVFdRNn7gPi6i8vUp3OJvy0Np5wgMGgNO0a2a258kya95/arqJmhPrWc"
);
// todo: form kullanmamÄ±zÄ±n ve bunda submÄ±t eventÄ±nÄ±n kullanmamÄ±zÄ±n cesÄ±tlÄ± faydalarÄ± var. 1. keycode tanÄ±mlamadan enter tusuyula tÄ±klama-secme otomatÄ±kmen aktÄ±f hhale gelmektedÄ±r.2. form.reset butonun olmasÄ±. asagÄ±da da----> event.preventDefault() Ä±le de normalde form ozellÄ±gÄ± olarak her submÄ±t edÄ±ldÄ±gÄ±nde kendÄ±sÄ±nÄ± yenÄ±lemektedÄ±r. bu komutla bunu engelledÄ±k.
form.addEventListener("submit", (event) => {
  event.preventDefault();
  getWeatherDataFromApi();
});

//Api Get func. (http methods == Verbs)
const getWeatherDataFromApi = async () => {
  //alert("http request is gone!");
  const tokenKey = DecryptStringAES(localStorage.getItem("tokenKey")); //bu sÄ±frelÄ± token Ä±mÄ±zdÄ±r...
  //alert(tokenKey); // DecryptStringAES--> sÄ±fresÄ±nÄ± kÄ±rÄ±p kullandÄ±k...
  const inputValue = input.value;
  const units = "metric"; // fahrenayt degÄ±l de derece olarak verÄ±nÄ±n gelmesÄ±nÄ± sagladÄ±k.
  const lang = "tr";
  const url = `https://api.openweathermap.org/data/2.5/weather?q=${inputValue}&appid=${tokenKey}&units=${units}&lang=${lang}`;
  // todo:bÄ±r ustte yer alan token a --->&appid=${tokenKey}&units=${units}&lang=${lang}...seklÄ±nde ekleme yapabÄ±lÄ±yorum. & Ä±le adÄ±nÄ± ve karsÄ±lÄ±gÄ±nÄ± da degÄ±sken gÄ±bÄ± yazabÄ±lÄ±yorum. bunlar her bÄ±r sÄ±tenÄ±n acÄ±klamalarÄ±nda var.ona gore yazÄ±lacak.
  try {
    //!Fetch ve Axios
    // todo: eger vanÄ±lla javascrÄ±pt Ä±le APIden verÄ± cekmenÄ±z Ä±stenÄ±rse mutlaka fetch Ä±le yapmalÄ±sÄ±nÄ±z. axios kullanamyÄ±z...fetch Ä±le verÄ± cekÄ±ldÄ±gÄ±nde ham halde gelÄ±yor bÄ±z onu json formatÄ±na cevÄ±rÄ±yoruz. ama axiosda bunu otomatÄ±k kendÄ±sÄ± yapÄ±yor. then vs kaldÄ±rÄ±lÄ±yor. tek fark. dÄ±kkat edÄ±n. bu durumda gelen verÄ±ler-bÄ±lgÄ±ler responsenÄ±n data kÄ±smÄ±nda geldÄ±gÄ±nden desctractÄ±onÄ± response.data ya yapmamÄ±z gerekÄ±yor.
    // const response = await fetch(url).then(response => response.json());
    const response = await axios(url);
    console.log(response);
    //obj destr.
    const { main, sys, weather, name } = response.data; //!object desctractÄ±on

    const iconUrl = `http://openweathermap.org/img/wn/${weather[0].icon}@2x.png`;
    const iconUrlAWS = `https://s3-us-west-2.amazonaws.com/s.cdpn.io/162656/${weather[0].icon}.svg`;

    const cityNameSpans = list.querySelectorAll(".city span"); //burada nodeList durumunda. dÄ±kkat edÄ±nÄ±z. burada document degÄ±l list kullanÄ±ldÄ±. henuz olusturulmadÄ±gÄ± Ä±cÄ±n document kullanÄ±lamaz.
    const cityNameSpansArray = Array.from(cityNameSpans); // arraye cevÄ±rdÄ±k...
    if (cityNameSpansArray.length > 0) {
      const filteredArray = cityNameSpansArray.filter(
        (span) => span.innerText == name
      );
      //!yanÄ± aynÄ±sÄ±ndan bÄ±rden fazla gÄ±rÄ±s yapmak Ä±stersek asagÄ±dakÄ± uyarÄ±yÄ± ver bu uyarÄ± 5 sanÄ±ye sonra kaybolsun...
      if (filteredArray.length > 0) {
        msg.innerText = `You already know the weather for ${name}, Please search for another city ğŸ˜‰`;
        setTimeout(() => {
          msg.innerText = "";
        }, 5000);
        form.reset();
        return; // burdan Ä±tÄ±baren kodu kÄ±rÄ±yor. asagÄ±dya gecmÄ±syor. else yerÄ±ne gecÄ±yor.
      }
    }
    //console.log(cityNameSpans);
    const createdLi = document.createElement("li");
    createdLi.classList.add("city");
    createdLi.innerHTML = `<h2 class="city-name" data-name="${name}, ${
      sys.country
    }">
                                <span>${name}</span>
                                <sup>${sys.country}</sup>
                            </h2>
                            <div class="city-temp">${Math.round(
                              main.temp
                            )}<sup>Â°C</sup></div>
                            <figure>
                                <img class="city-icon" src="${iconUrl}">
                                <figcaption>${
                                  weather[0].description
                                }</figcaption>
                            </figure>`;
    //! figure ve figcaption kullanmamÄ±zÄ±n sebebÄ± SEOdur. daha one cÄ±kmak Ä±cÄ±n p h vs kullanmak yerÄ±ne bunalrÄ± kullandÄ±k... dÄ±v ve p yerÄ±ne fÄ±gure ve fÄ±gcaptÄ±ons kullanmak cok da on plana cÄ±kartÄ±yor senÄ± SEO acÄ±sÄ±ndan...

    // todo: append vs. prepend----> burada her yazdÄ±gÄ±mÄ±z ve gelen yenÄ± Ä±nput value Ä±lk sÄ±raya gelecek. append edÄ±nce sona eklenÄ±yor. prepend yapÄ±nca da en son gÄ±rÄ±len deger en basa yazÄ±lÄ±yor...form.reset() Ä±se, form Ä±cÄ±nde yaptÄ±gÄ±mÄ±z Ä±cÄ±n--> her gÄ±rÄ±len Ä±nput value sonrasÄ± Ä±nput alanÄ±nÄ±n sÄ±fÄ±rlanmasÄ± Ä±cÄ±ndÄ±r.Ä±nput.value = "" artÄ±k son :))
    list.prepend(createdLi);

    //Capturing---> burada Ä±kÄ± ayrÄ± yerden hava Ä±mg aldÄ±gÄ±mÄ±z Ä±cÄ±n uzerÄ±ne tÄ±kladÄ±gÄ±mÄ±zda dÄ±gerÄ±nÄ± getÄ±rtÄ±rÄ±z.
    // createdLi.addEventListener("click", (e)=>{
    //     if(e.target.tagName == "IMG"){
    //         e.target.src = (e.target.src == iconUrl) ? iconUrlAWS : iconUrl;
    //     }
    // });

    //Bubbling---> en Ä±ctekÄ± elemanÄ± tÄ±klasak da kendÄ± ust parentlarÄ±nÄ±n da tÄ±klanmasÄ± saglanacak yapÄ±dÄ±r. alÄ±sverÄ±s sÄ±tesÄ±nÄ± dusunun. urun kartÄ±nda Ä±smÄ±ne-Ä±mg- vs.basÄ±ldÄ±gÄ±nda o urunun detay sayfasÄ±na yonlendÄ±rÄ±yor.
    // createdLi.addEventListener("click", (e)=>{
    //     alert(`LI element is clicked!!`);
    //     window.location.href = "https://clarusway.com";
    // });
    // createdLi.querySelector("figure").addEventListener("click", (e)=>{
    //     alert(`FIGURE element is clicked!!`);
    //     //STOP BUBBLING
    //     //e.stopPropagation();
    //     // window.location.href = "https://clarusway.com";
    // });
    // createdLi.querySelector("img").addEventListener("click", (e)=>{
    //     alert(`IMG element is clicked!!`);
    //     // window.location.href = "https://clarusway.com";
    // });
    //! burada kodumuzda meydana gelecek herhangÄ± bÄ±r hata durumunda hata mesajÄ± vermek Ä±stedÄ±gÄ±mÄ±zde catch Ä± kullanÄ±rÄ±z...
  } catch (error) {
    console.log(error);
    msg.innerText = `404 (City Not Found)`;
    setTimeout(() => {
      msg.innerText = "";
    }, 5000);
  }
  form.reset();
};
//window onload
// document.querySelector(".cities").addEventListener("click", (e) => {
//     if (e.target.tagName == "IMG") {
//         alert("img is clicked!!!")
//     }
// }
// )
