console.log("**** TRAVERSING DOM ****");

//*===========================================
//*            TRAVERSING DOM
//*===========================================
//? Bir HTML elementi uzerinden baska elementleri secmeye
//? DOM traversing denilir. Ozellikle dinamik olarak degisen
//? (silme veya yeni ekleme gibi) HTML elemanlarinin secerken
//? gerekli olabilir.

//? Secme islemi 3 yonlu yapilabilir.
//? - Yukari yonde (Parent) yanÄ± bÄ±r ustundekÄ±, atasÄ±
//? - Asagi yonde (children) yanÄ± bÄ±r altÄ±ndakÄ± cocugu
//? - Yatay yonde (Sibling) yanÄ± aynÄ± duzeydekÄ± kardesler

//* 1- Yukari Yonde traverse
//*----------------------------------------------

//! parentElement, parentNode
const list = document.querySelector(".list"); //classÄ± list olan elamanÄ± sec.
const ul = list.parentNode; //bu elemanÄ±n
ul.style.border = "2px solid red";

console.log(list.parentNode.parentNode.parentNode.parentNode.parentNode); //? document

console.log(list.parentElement);

//! closest(): belirtilen elementin parent'larin ilk uygun parent'i secer
const itemListSec = list.closest("section"); //sectÄ±on Ä±cÄ±ndekÄ±
itemListSec.style.background = "green";

//*2- Asagi Yonde traverse
//*----------------------------------------------
const addItem = document.querySelector(".add-item");
console.log(addItem.children); // clasÄ± .add-item olan elemanÄ± buluyoruz. bunun altÄ±ndakÄ±lerÄ±-cocuklarÄ±na ulasmak Ä±cÄ±n Ä±ndex yontemÄ±nÄ± kullanÄ±yoruz.
const h2 = addItem.children[0];
const inp = addItem.children[1];
h2.style.color = "blue";
inp.style.background = "red";

console.log(addItem.parentNode.parentNode.children[0]); //? Header

console.log(ul.firstElementChild.innerText);
console.log(ul.lastElementChild.innerText);

//*3- Yatay Yonde traverse
//*----------------------------------------------

//! nextElementSibling ,previousElementSibling

const myList = ul.children;
console.log(myList);

const javascript = myList[2];

const css = javascript.previousElementSibling; //aynÄ± hÄ±zadakÄ± ve kendÄ±nden once yazÄ±lmÄ±s
console.log(css.innerText);
const react = javascript.nextElementSibling; //aynÄ± hÄ±zadakÄ± ve kendÄ±nden sonra yazÄ±lmÄ±s eleman
console.log(react.textContent);
console.log(javascript.previousElementSibling.previousElementSibling.innerText); //aynÄ± hÄ±zadakÄ± ve kendÄ±nden sonra yazÄ±lmÄ±s elemandan sonra yazÄ±lmÄ±s eleman---<HTML>

/****************************************************************** */
console.log("**** CREATE NODE ****");
/****************************************************************** */
// document.createElement(isim) ---> Yeni bir eleman oluÅŸturur.
// Document.createTextNode(text) ---> Bir eleman iÃ§in text dÃ¼ÄŸÃ¼mÃ¼ oluÅŸturur.
// element.appendChild(text dÃ¼ÄŸÃ¼m) ---> Bir text dÃ¼ÄŸÃ¼mÃ¼ne elemana baÄŸlar.
// Element.removeChild(child dÃ¼ÄŸÃ¼m) ---> Bir elemanÄ±n Ã§ocuk dÃ¼ÄŸÃ¼mÃ¼nÃ¼ siler

//?Yeni bir P elementi olusturalim
const newP = document.createElement("p"); //Ä±cÄ± bos bÄ± p olusturup bÄ± degÄ±skene atadÄ±k.
newP.id = "new-par"; //yenÄ± bÄ±r ozellÄ±k verebÄ±lÄ±yoruz. id sÄ± bu olsun.
newP.setAttribute("class", "new-class"); //yenÄ± bÄ±r ozellÄ±k verebÄ±lÄ±yoruz. her turlu ozellÄ±gÄ± verebÄ±lÄ±yoruz. burada Ä±lk yazÄ±lan ozellÄ±k adÄ±dÄ±r, Ä±kÄ±ncÄ±sÄ± Ä±se bu ozellÄ±ge verÄ±len deger, yanÄ± valuesudur. class olasturduk ve clasÄ±na da new-class adÄ±nÄ± verdÄ±k.

const text = document.createTextNode("This is a new p element"); //burada yenÄ± bÄ±r Ä±cerÄ±k olusturduk
newP.appendChild(text); //text Ä±cerÄ±gÄ±nÄ± bu method Ä±le newP nÄ±n chÄ±ld Ä± yaptÄ±k.
console.log(newP);

const h4 = document.querySelector(".item-list h4"); //burada kendÄ±mÄ±z bÄ±r nokta-yer belÄ±rlemek belÄ±rlÄ±yoruz. neden mÄ±? cunku yukarÄ±da olusturdugumuz yenÄ± elemanÄ±mÄ±zÄ± bu belÄ±rledÄ±gÄ±mÄ±z noktanÄ±n oncesÄ±ne veya sonrasÄ±na yerlestÄ±recegÄ±z.
h4.before(newP);
// h4.after(newP);

//? getAttribute() // bununla olusturdugumuz elemanÄ±n bÄ±lgÄ±lerÄ±nÄ± soruyoruz. varsa karsÄ±sÄ±ndakÄ± degerÄ± yazdÄ±rÄ±r. yoksa null deger donderÄ±r.
console.log(newP.getAttribute("class"));
console.log(newP.getAttribute("id"));
console.log(newP.getAttribute("name"));

//? classList
console.log(newP.classList.contains("par")); //? false
newP.classList.add("new-class");
console.log(newP);
newP.classList.remove("new-class");

//? INNER HTML (Ciddi Guvenlik aciklari var)
const ulMy = document.querySelector("ul");
ulMy.innerHTML += `<li id="list-id" class="list">Boostrap</li>`;

//?====================================================================//
//? ******************************* Ã–RNKLER****************************//
//?====================================================================//
//! 1.ORNEK
// SayfamÄ±zda bulunan <p> elemanÄ±na eriÅŸip renginde deÄŸiÅŸiklik yapalÄ±m. â€¢ Bunun iÃ§in HTML dosyamÄ±zda p elemanÄ±na bir id ekleyelim
// <p id="my-par">Javascript Ã¶ÄŸrenmek iÃ§in link </p>
// â€¢ ArtÄ±k getElementById() metodu ile javacript kodumuzda <p> elemanÄ±na eriÅŸebiliriz.
// const paragraf = document.getElementById('my-par');
// â€¢ Ve artÄ±k bu elemana ait bir Ã§ok Ã¶zelliÄŸe deÄŸiÅŸkenAdÄ±. ile eriÅŸebiliriz.
// paragraf.style.color = 'red'

//! 2.ORNEK
// SayfamÄ±zda bulunan <button> elemanÄ±na ait bazÄ± deÄŸiÅŸiklikleri yapalÄ±m.
// â€¢ Bunun iÃ§in HTML dosyamÄ±zda elemanÄ±mÄ±za id=â€˜btnâ€™ eklemesini yapalÄ±m.
// const buton = document.getElementById("btn");
// buton.style.color = "yellow";
// buton.style.backgroundColor = "black";
// buton.innerHTML = "ARA";
// buton.style.fontSize = 20;
// NOT: id tÃ¼m HTML dosyasÄ± iÃ§in tekrarsÄ±z olduÄŸu iÃ§in getElementById()
// metodu ile sadece tek bir HTML elemanÄ±nÄ± seÃ§ebiliriz.

//! 3.ORNEK
//  SayfamÄ±zda bulunan <img elemanÄ±na ait bazÄ± deÄŸiÅŸiklikleri yapalÄ±m.
//  â€¢ Bu sefer getElementByTagName() metodu ile elemanÄ±mÄ±zÄ±n Ã¶zelliklerine eriÅŸelim.
// const resim = document.getElementsByTagName("img");
// resim[0].style.borderStyle = "solid";
// resim[0].style.borderolor = "purple";
//  NOT: Bu metot ile etiketi aynÄ± olan tÃ¼m elemanlar (<img) seÃ§ilmektedir.
// DolayÄ±sÄ±yla tek bir eleman seÃ§mek iÃ§in indisleme kullanmak gerekir.

//! 4.ORNEK
/*SayfamÄ±zda bulunan <h1> elemanÄ±na ait bazÄ± deÄŸiÅŸiklikleri yapalÄ±m. 
â€¢ Bu sefer getElementByClassName() metodu ile elemanÄ±mÄ±zÄ±n Ã¶zelliklerine eriÅŸelim.
const header = document.getElementsByClassName('header');
header[0].innerHTML = 'DOM ManipÃ¼lasyonu Ã‡ok ilginÃ§';
header[0].style.fontSize = 25;
header[0].style.fontFamily ='Tahoma';
header[0].style.color = 'blue';
NOT: Bu metot ile class (sÄ±nÄ±fÄ±) aynÄ± olan tÃ¼m elemanlar (<h1>)
seÃ§ilmektedir. DolayÄ±sÄ±yla tek bir eleman seÃ§mek iÃ§in indisleme kullanmak
gerekir. */

//! 5.ORNEK
/*SayfamÄ±zÄ±n arka planÄ±nÄ±n rengini ve sayfamÄ±zÄ±n baÅŸlÄ±ÄŸÄ±nÄ± (title) deÄŸiÅŸtirelim ve elemanlarÄ± seÃ§mek iÃ§in querySelector() metodunu kullanalÄ±m.
const body = document.querySelector(â€˜#body');
body.style.backgroundImage = 'linear-gradient(to right, green, yellow)â€™;
const title = document.querySelector(".title");
title.innerHTML = "DOM Ã–rnekleri ğŸ‘€";
NOT:
â€¢ querySelector metodunda id ile seÃ§im yaparken â€˜#idâ€™, class iÃ§in ise â€˜.classAdÄ±â€™ yazÄ±lmalÄ±dÄ±r. 
â€¢ querySelector belirtilen ÅŸarta uygun ilk elemanÄ± seÃ§er. AynÄ± classâ€™daki birden
fazla elemanÄ± seÃ§mek iÃ§in querySelectorAll() metodu kullanÄ±lmalÄ±dÄ±r. */
